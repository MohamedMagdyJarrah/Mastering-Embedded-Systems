# This Makefile was made by { Eng. Mohamed Magdy }

# Put the cross tool chain in CC
CC=arm-none-eabi-
# Put the target and the debug flag according to the gdb of the target
CFLAGS=-mcpu=cortex-m3 -gdwarf-2
# Put all your includes in INCS and libraries in LIB
INCS=-I .
LIBS=
# SRC  ==> To save all the .c files in SRC
SRC=$(wildcard *.c)
# OBJ  ==> To save all the .o in OBJ by changing all .c files
OBJ=$(SRC:.c=.o)
# As & AsOBJ ==> same as previous but for the assembly files
As=$(wildcard *.s)
AsOBJ=$(As:.s=.o)
# Put your project name here
Project_Name=LAB2_Part2

# To let the make command start from here and depend on .bin file
all: $(Project_Name).bin

# (%) To make it generic and take all the .s files instead writing every file in dependencies
%.o: %.s
	$(CC)as.exe $(CFLAGS) $< -o $@ 

# Same as the previous line
%.o: %.c
	$(CC)gcc.exe -c $(INCS) $(CFLAGS) $< -o $@

# Linking all files using AsOBJ and OBJ which contain all .o files generated from .c and .s files
$(Project_Name).elf: $(AsOBJ) $(OBJ)
	$(CC)ld.exe -T linkerscript.ld -Map=Map_file.map $(LIB) $(AsOBJ) $(OBJ) -o $@ 

# Generate the binary file from elf file generated by the linker
$(Project_Name).bin: $(Project_Name).elf
	$(CC)objcopy.exe -O binary $< $@ 
	@echo "===============> Build Done <==============="
	
# Option to clean all files and generate new .o files to compile and assemble them again
clean_all:
	rm *.o *.bin *.elf
	@echo "===============> All Cleaned <==============="

# Option to clean elf and bin files only if we edited linkerscript and want to link them only
clean:
	rm *.bin *.elf
	@echo "===============> BIN & ELF Cleaned <==============="